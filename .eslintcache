[{"D:\\Test Projects\\pwa-video-editor\\src\\index.js":"1","D:\\Test Projects\\pwa-video-editor\\src\\App.js":"2","D:\\Test Projects\\pwa-video-editor\\src\\reportWebVitals.js":"3","D:\\Test Projects\\pwa-video-editor\\src\\serviceWorker.js":"4"},{"size":577,"mtime":1611332070310,"results":"5","hashOfConfig":"6"},{"size":5517,"mtime":1611330944748,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1610463811860,"results":"8","hashOfConfig":"6"},{"size":6049,"mtime":1611332011049,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"15uuqlt",{"filePath":"13","messages":"14","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"D:\\Test Projects\\pwa-video-editor\\src\\index.js",[],["21","22"],"D:\\Test Projects\\pwa-video-editor\\src\\App.js",["23","24","25","26"],"import logo from './logo.svg';\nimport { useState, useEffect } from 'react'\nimport './App.css';\n\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg'\n\nconst ffmpeg = createFFmpeg({ log: true });\n\n\nfunction App() {\n\n  const [ready, setReady] = useState(false);\n  const [video1, setVideo1] = useState();\n  const [video2, setVideo2] = useState();\n  const [video3, setVideo3] = useState();\n\n\n  // const [vid1Start, setVid1Start] = useState({ \"h\": \"00\", \"m\": \"00\", \"s\": \"00\" });\n  // const [vid2Start, setVid2Start] = useState(0);\n  // const [vid3Start, setVid3Start] = useState(0);\n\n  const [finalVid, setFinalVid] = useState();\n\n  const load = async () => {\n    await ffmpeg.load();\n    setReady(true);\n  }\n\n\n  const convertToGif = async () => {\n\n    ffmpeg.FS('writeFile', 'vid1.mp4', await fetchFile(video1))\n    ffmpeg.FS('writeFile', 'vid2.mp4', await fetchFile(video2))\n    ffmpeg.FS('writeFile', 'vid3.mp4', await fetchFile(video3))\n\n\n    await ffmpeg.run(\"-i\", 'vid1.mp4', \"-i\", 'vid2.mp4', \"-i\", 'vid3.mp4',\n      \"-filter_complex\", \"[0:v:0]trim=start=00:00:00:end=00:00:03,setdar=16/9,scale=1920x1080,setpts=PTS-STARTPTS[v0],[0:a:0]atrim=start=00:00:00:end=00:00:03,asetpts=PTS-STARTPTS[a0],[1:v:0]trim=start=00:00:00:end=00:00:03,setdar=16/9,scale=1920x1080,setpts=PTS-STARTPTS[v1],[1:a:0]atrim=start=00:00:00:end=00:00:03,asetpts=PTS-STARTPTS[a1],[2:v:0]trim=start=00:00:00:end=00:00:03,setdar=16/9,scale=1920x1080,setpts=PTS-STARTPTS[v2],[2:a:0]atrim=start=00:00:00:end=00:00:03,asetpts=PTS-STARTPTS[a2],[v0][a0][v1][a1][v2][a2]concat=n=3:v=1:a=1[outv][outa]\", \"-vsync\", \"2\", \"-map\", \"[outv]\", \"-map\", \"[outa]\", '-s', '1920x1080', \"output.mp4\")\n\n    const data = ffmpeg.FS('readFile', 'output.mp4');\n\n    const url = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));\n    setFinalVid(url);\n  }\n\n  const loadVideo = file => new Promise((resolve, reject) => {\n    try {\n      let video = document.createElement('video')\n      video.preload = 'metadata'\n\n      video.onloadedmetadata = function () {\n        resolve(this)\n      }\n\n      video.onerror = function () {\n        reject(\"Invalid video. Please select a video file.\")\n      }\n\n      video.src = window.URL.createObjectURL(file)\n    } catch (e) {\n      reject(e)\n    }\n  })\n\n  const handleVideoInput = async (fileInput, vidNum) => {\n\n    if (vidNum == \"vid1\") {\n\n      setVideo1(fileInput.target.files?.item(0));\n      // const file = await loadVideo(fileInput.currentTarget.files[0]);\n      // const duration = new Date(null);\n      // duration.setSeconds(file.duration);\n      // const time = duration.toISOString().substr(11, 8);\n      // console.log(time);\n      // const hour = time.substr(0, 2)\n      // const min = time.substr(3, 2)\n      // const sec = time.substr(6, 2)\n\n      //setVid1Start({ h: hour, m: min, s: sec })\n\n    } else if (vidNum === \"vid2\") {\n      console.log(\"vid2\");\n      setVideo2(fileInput.target.files?.item(0));\n    } else {\n      console.log(\"NOT vid 1\");\n    }\n\n\n  }\n\n  useEffect(() => {\n    load();\n  }, [])\n\n  //logical && operator to show the video elem only when video is defined\n  return ready ? (\n    <div className=\"App\">\n\n      <h1>Cut* and Merge Progressive Web Application</h1>\n      <h3>Made With React and FFmpeg.wasm</h3>\n\n      <div className=\"centerDiv\">\n        <div className=\"videoGroup\" >\n          {video1 && <video\n            controls\n            width=\"240\" height=\"160\"\n            src={URL.createObjectURL(video1)}>\n          </video>}\n          {!video1 && <canvas id=\"myCanvas\" width=\"240\" height=\"160\" className=\"emptyVideo\">\n          </canvas>}\n          {/* <TimeFormat videoLength={vid1Start} /> */}\n          <input type=\"file\" accept=\"video/*\" onChange={(inputVideo) => handleVideoInput(inputVideo, \"vid1\")} />\n        </div>\n\n\n        <div className=\"videoGroup\">\n          {video2 && <video\n            controls\n            width=\"240\" height=\"160\"\n            src={URL.createObjectURL(video2)}>\n          </video>}\n          {!video2 && <canvas id=\"myCanvas\" width=\"240\" height=\"160\" className=\"emptyVideo\">\n          </canvas>}\n          <input type=\"file\" accept=\"video/*\" onChange={(e) => setVideo2(e.target.files?.item(0))} />\n        </div>\n\n\n\n\n        <div className=\"videoGroup\">\n          {video3 && <video\n            controls\n            width=\"240\" height=\"160\"\n            src={URL.createObjectURL(video3)}>\n          </video>}\n\n          {!video3 && <canvas id=\"myCanvas\" width=\"240\" height=\"160\" className=\"emptyVideo\">\n          </canvas>}\n\n          <input type=\"file\" accept=\"video/*\" onChange={(e) => setVideo3(e.target.files?.item(0))} />\n        </div>\n\n      </div>\n\n      <h3>Result</h3>\n\n      <button onClick={convertToGif}>Convert</button>\n\n      {\n        finalVid && <video\n          controls\n          width=\"320\" height=\"240\"\n          src={finalVid}></video>\n      }\n\n      <p>*default: first 3 seconds</p>\n\n    </div >\n  ) : (<p className=\"centerDiv\">Loading FFmpeg</p>)\n}\n\n\nconst TimeFormat = ({ videoLength }) => {\n  console.log(videoLength);\n\n\n\n  return (<>\n    <div style={{\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      backgroundColor: \"transparent\"\n    }}>\n      <DurationDropDown durationInput={videoLength.h} /> : <DurationDropDown durationInput={videoLength.m} /> : <DurationDropDown durationInput={videoLength.s} />\n    </div>\n  </>)\n}\n\nconst DurationDropDown = ({ durationInput, place }) => {\n\n  return (<>\n    <button>{durationInput}</button>\n  </>)\n}\n\nexport default App;\n","D:\\Test Projects\\pwa-video-editor\\src\\reportWebVitals.js",[],"D:\\Test Projects\\pwa-video-editor\\src\\serviceWorker.js",[],["27","28"],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":12},{"ruleId":"33","severity":1,"message":"37","line":46,"column":9,"nodeType":"35","messageId":"36","endLine":46,"endColumn":18},{"ruleId":"38","severity":1,"message":"39","line":67,"column":16,"nodeType":"40","messageId":"41","endLine":67,"endColumn":18},{"ruleId":"33","severity":1,"message":"42","line":163,"column":7,"nodeType":"35","messageId":"36","endLine":163,"endColumn":17},{"ruleId":"29","replacedBy":"43"},{"ruleId":"31","replacedBy":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'loadVideo' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'TimeFormat' is assigned a value but never used.",["45"],["46"],"no-global-assign","no-unsafe-negation"]