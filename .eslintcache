[{"D:\\Test Projects\\pwa-video-editor\\src\\index.js":"1","D:\\Test Projects\\pwa-video-editor\\src\\App.js":"2","D:\\Test Projects\\pwa-video-editor\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":1610463811860,"results":"4","hashOfConfig":"5"},{"size":3778,"mtime":1610711197238,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1610463811860,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"15uuqlt",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\Test Projects\\pwa-video-editor\\src\\index.js",[],["17","18"],"D:\\Test Projects\\pwa-video-editor\\src\\App.js",["19"],"import logo from './logo.svg';\nimport { useState, useEffect } from 'react'\nimport './App.css';\n\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg'\n//createFFmeg function gives as a starting point for working with this library\n\nconst ffmpeg = createFFmpeg({ log: true });\n\n//the actual webassembly binary has to be loaded asynchronously to not block the web app at start\n\n\nfunction App() {\n\n  const [ready, setReady] = useState(false);\n  const [video1, setVideo1] = useState();\n  const [video2, setVideo2] = useState();\n  const [video3, setVideo3] = useState();\n  const [gif, setGif] = useState();\n\n  const load = async () => {\n    await ffmpeg.load();\n    setReady(true);\n  }\n\n  // const trimVideo = (start, end, videoNum) => {\n  //   //Reflect on the loader \"Trimming ____.mp4  \"\n  //   await ffmpeg.run('-i', '-ss', start, '-t', end,)\n  // }\n\n  const convertToGif = async () => {\n    // Write the file to memory \n    //Web assembly is managing its own memory file system, in order to run ffmpeg on the file you need to make it known to the wasm file system\n    ffmpeg.FS('writeFile', 'vid1.mp4', await fetchFile(video1)) //take video and save it as test.mp4\n    ffmpeg.FS('writeFile', 'vid2.mp4', await fetchFile(video2)) //take video and save it as test.mp4\n    ffmpeg.FS('writeFile', 'vid3.mp4', await fetchFile(video3)) //take video and save it as test.mp4\n\n    // Run ffmpeg command\n    // -i flag is for input, -t is the length we want the video to be\n    // -ss to offset starting second, -f to encode\n    //await ffmpeg.run('-i', 'vid2.mp4', '-t', '2.5', '-ss', '2.0', '-f', 'gif', 'out.gif')\n\n    // await ffmpeg.run(\"-i\", 'vid1.mp4', \"-i\", 'vid2.mp4', \"-i\", 'vid3.mp4',\n    //   \"-filter_complex\", \"[0:v:0][0:a:0][1:v:0][1:a:0][2:v:0][2:a:0]concat=n=3:v=1:a=1[outv][outa]\", \"-map\", \"[outv]\", \"-map\", \"[outa]\", '-s', '1920x1080', \"output.mp4\")\n\n\n\n    await ffmpeg.run(\"-i\", 'vid1.mp4', \"-i\", 'vid2.mp4',\n      \"-filter_complex\", \"[0:v:0]trim=start=00:00:00:end=00:00:03,setdar=16/9,scale=1920x1080,setpts=PTS-STARTPTS[v0],[0:a:0]atrim=start=00:00:00:end=00:00:10,asetpts=PTS-STARTPTS[a0],[1:v:0]trim=start=00:00:00:end=00:00:03,setdar=16/9,scale=1920x1080,setpts=PTS-STARTPTS[v1],[1:a:0]atrim=start=00:00:00:end=00:00:03,asetpts=PTS-STARTPTS[a1],[v0][a0][v1][a1]concat=n=2:v=1:a=1[outv][outa]\", \"-vsync\", \"2\", \"-map\", \"[outv]\", \"-map\", \"[outa]\", '-s', '1920x1080', \"output.mp4\")\n\n    //read result \n    const data = ffmpeg.FS('readFile', 'output.mp4');\n\n    //create a url to view it in the browser, blob just means raw file in thiss case binary \n    // pass the MIME type???\n    const url = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));\n    setGif(url);\n  }\n\n  useEffect(() => {\n    load();\n  }, [])\n\n  //logical && operator to show the video elem only when video is defined\n  return ready ? (\n    <div className=\"App\">\n\n      { video1 && <video\n        controls\n        with=\"250%\"\n        src={URL.createObjectURL(video1)}>\n      </video>}\n\n      <hr />\n\n      { video2 && <video\n        controls\n        with=\"250%\"\n        src={URL.createObjectURL(video2)}>\n      </video>}\n\n      <hr />\n      { video3 && <video\n        controls\n        with=\"250%\"\n        src={URL.createObjectURL(video3)}>\n      </video>}\n\n      <input type=\"file\" accept=\"video/*\" onChange={(e) => setVideo1(e.target.files?.item(0))} />\n      <input type=\"file\" accept=\"video/*\" onChange={(e) => setVideo2(e.target.files?.item(0))} />\n      <input type=\"file\" accept=\"video/*\" onChange={(e) => setVideo3(e.target.files?.item(0))} />\n\n      <h3>Resule</h3>\n\n      <button onClick={convertToGif}>Convert</button>\n\n      {gif && <video\n        controls\n        with=\"250%\"\n        src={gif}></video>}\n\n    </div>\n  ) : (<p>Loading FFmpeg</p>)\n}\n\nexport default App;\n","D:\\Test Projects\\pwa-video-editor\\src\\reportWebVitals.js",[],["20","21"],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":1,"column":8,"nodeType":"28","messageId":"29","endLine":1,"endColumn":12},{"ruleId":"22","replacedBy":"30"},{"ruleId":"24","replacedBy":"31"},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar",["32"],["33"],"no-global-assign","no-unsafe-negation"]