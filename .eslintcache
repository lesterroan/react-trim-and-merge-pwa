[{"D:\\Test Projects\\pwa-video-editor\\src\\index.js":"1","D:\\Test Projects\\pwa-video-editor\\src\\App.js":"2","D:\\Test Projects\\pwa-video-editor\\src\\reportWebVitals.js":"3","D:\\Test Projects\\pwa-video-editor\\src\\serviceWorker.js":"4"},{"size":597,"mtime":1611353707393,"results":"5","hashOfConfig":"6"},{"size":7821,"mtime":1611504529684,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1610463811860,"results":"8","hashOfConfig":"6"},{"size":6049,"mtime":1611353679934,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1x6k33l",{"filePath":"13","messages":"14","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Test Projects\\pwa-video-editor\\src\\index.js",[],["20","21"],"D:\\Test Projects\\pwa-video-editor\\src\\App.js",["22","23","24","25"],"// import logo from './logo.svg';\r\nimport { useState, useEffect } from 'react'\r\nimport './App.css';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\nimport Loader from 'react-loader-spinner'\r\n\r\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg'\r\n\r\n\r\nconst ffmpeg = createFFmpeg({\r\n  log: false,\r\n});\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  const [isConverting, setIsConverting] = useState(false);\r\n  const [progress, setProgress] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const [alert, setAlert] = useState(\"\");\r\n\r\n  const [ready, setReady] = useState(false);\r\n  const [video1, setVideo1] = useState();\r\n  const [video2, setVideo2] = useState();\r\n  const [video3, setVideo3] = useState();\r\n\r\n\r\n  // const [vid1Start, setVid1Start] = useState({ \"h\": \"00\", \"m\": \"00\", \"s\": \"00\" });\r\n  // const [vid2Start, setVid2Start] = useState(0);\r\n  // const [vid3Start, setVid3Start] = useState(0);\r\n\r\n  const [finalVid, setFinalVid] = useState();\r\n\r\n  const load = async () => {\r\n    await ffmpeg.load();\r\n    setReady(true);\r\n  }\r\n\r\n\r\n  const processVideo = async () => {\r\n\r\n    setIsConverting(true);\r\n    setFinalVid(null);\r\n\r\n\r\n\r\n    ffmpeg.FS('writeFile', 'vid1.mp4', await fetchFile(video1))\r\n    ffmpeg.FS('writeFile', 'vid2.mp4', await fetchFile(video2))\r\n    ffmpeg.FS('writeFile', 'vid3.mp4', await fetchFile(video3))\r\n\r\n\r\n\r\n\r\n\r\n    await ffmpeg.run(\"-i\", 'vid1.mp4', \"-i\", 'vid2.mp4', \"-i\", 'vid3.mp4',\r\n      \"-filter_complex\", \"[0:v:0]trim=start=00:00:00:end=00:00:15,setdar=16/9,scale=1920x1080,setpts=PTS-STARTPTS[v0],[0:a:0]atrim=start=00:00:00:end=00:00:15,asetpts=PTS-STARTPTS[a0],[1:v:0]trim=start=00:00:00:end=00:00:15,setdar=16/9,scale=1920x1080,setpts=PTS-STARTPTS[v1],[1:a:0]atrim=start=00:00:00:end=00:00:15,asetpts=PTS-STARTPTS[a1],[2:v:0]trim=start=00:00:00:end=00:00:15,setdar=16/9,scale=1920x1080,setpts=PTS-STARTPTS[v2],[2:a:0]atrim=start=00:00:00:end=00:00:15,asetpts=PTS-STARTPTS[a2],[v0][a0][v1][a1][v2][a2]concat=n=3:v=1:a=1[outv][outa]\", \"-vsync\", \"2\", \"-map\", \"[outv]\", \"-map\", \"[outa]\", '-s', '1920x1080', \"output.mp4\")\r\n\r\n\r\n\r\n    const data = ffmpeg.FS('readFile', 'output.mp4');\r\n\r\n    const url = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));\r\n    setFinalVid(url);\r\n\r\n    setIsConverting(false);\r\n  }\r\n\r\n  const loadVideo = file => new Promise((resolve, reject) => {\r\n    try {\r\n      let video = document.createElement('video')\r\n      video.preload = 'metadata'\r\n\r\n      video.onloadedmetadata = function () {\r\n        resolve(this)\r\n      }\r\n\r\n      video.onerror = function () {\r\n        reject(\"Invalid video. Please select a video file.\")\r\n      }\r\n\r\n      video.src = window.URL.createObjectURL(file)\r\n    } catch (e) {\r\n      reject(e)\r\n    }\r\n  })\r\n\r\n  const handleVideoInput = async (fileInput, vidNum) => {\r\n\r\n    if (vidNum === \"vid1\") {\r\n\r\n      setVideo1(fileInput.target.files?.item(0));\r\n      // const file = await loadVideo(fileInput.currentTarget.files[0]);\r\n      // const duration = new Date(null);\r\n      // duration.setSeconds(file.duration);\r\n      // const time = duration.toISOString().substr(11, 8);\r\n      // console.log(time);\r\n      // const hour = time.substr(0, 2)\r\n      // const min = time.substr(3, 2)\r\n      // const sec = time.substr(6, 2)\r\n\r\n      //setVid1Start({ h: hour, m: min, s: sec })\r\n\r\n    } else if (vidNum === \"vid2\") {\r\n      console.log(\"vid2\");\r\n      setVideo2(fileInput.target.files?.item(0));\r\n    } else {\r\n      console.log(\"NOT vid 1\");\r\n    }\r\n\r\n\r\n  }\r\n  const handleCutAndMerge = () => {\r\n\r\n    if (video1 === undefined) {\r\n      handleAlert('Video 1')\r\n    } else if (video2 === undefined) {\r\n      handleAlert('Video 2')\r\n    } else if (video3 === undefined) {\r\n      handleAlert('Video 3')\r\n    }\r\n    else {\r\n      setAlert(undefined);\r\n      processVideo();\r\n    };\r\n  }\r\n  const handleAlert = (msg) => {\r\n    console.log(msg);\r\n    setAlert(msg)\r\n  }\r\n\r\n  useEffect(() => {\r\n    load();\r\n\r\n    ffmpeg.setLogger(({ type, message }) => {\r\n      if (type !== 'info') {\r\n        setMessage(message);\r\n        console.log(message);\r\n      }\r\n    });\r\n    ffmpeg.setProgress(({ ratio }) => {\r\n      if (ratio >= 0 && ratio <= 1) {\r\n        setProgress(`${(ratio * 100.0).toFixed(2)}%`);\r\n        console.log((ratio * 100.0).toFixed(2))\r\n      }\r\n      if (ratio === 1) {\r\n        setTimeout(() => { setProgress(\"\"); }, 1000);\r\n      }\r\n    });\r\n  }, [])\r\n\r\n  return ready ? (\r\n    <div className=\"App\">\r\n      {alert && <span className=\"alert\">NO {alert} input!</span>}\r\n      <h1>Cut* and Merge Progressive Web Application</h1>\r\n\r\n      {!isConverting && <div className=\"centerDiv\">\r\n        <div className=\"videoGroup\" >\r\n          {video1 && <video\r\n            controls\r\n            width=\"360\" height=\"240\"\r\n            src={URL.createObjectURL(video1)}>\r\n          </video>}\r\n          {!video1 && <canvas id=\"myCanvas\" width=\"360\" height=\"240\" className=\"emptyVideo\">\r\n          </canvas>}\r\n          <input type=\"file\" accept=\"video/*\" onChange={(inputVideo) => handleVideoInput(inputVideo, \"vid1\")} />\r\n        </div>\r\n\r\n\r\n        <div className=\"videoGroup\">\r\n          {video2 && <video\r\n            controls\r\n            width=\"360\" height=\"240\"\r\n            src={URL.createObjectURL(video2)}>\r\n          </video>}\r\n          {!video2 && <canvas id=\"myCanvas\" width=\"360\" height=\"240\" className=\"emptyVideo\">\r\n          </canvas>}\r\n          <input type=\"file\" accept=\"video/*\" onChange={(e) => setVideo2(e.target.files?.item(0))} />\r\n        </div>\r\n\r\n        <div className=\"videoGroup\">\r\n          {video3 && <video\r\n            controls\r\n            width=\"360\" height=\"240\"\r\n            src={URL.createObjectURL(video3)}>\r\n          </video>}\r\n\r\n          {!video3 && <canvas id=\"myCanvas\" width=\"360\" height=\"240\" className=\"emptyVideo\">\r\n          </canvas>}\r\n\r\n          <input type=\"file\" accept=\"video/*\" onChange={(e) => setVideo3(e.target.files?.item(0))} />\r\n        </div>\r\n\r\n      </div>\r\n      }\r\n      <div className=\"videoGroup\">\r\n        {isConverting && <p>Cutting and Merging Videos. Please Wait...</p>}\r\n        <Loader\r\n          type=\"ThreeDots\"\r\n          color=\"#fa476e\"\r\n          height={50}\r\n          width={50}\r\n          visible={isConverting}\r\n\r\n        />\r\n        {\r\n          finalVid && <video\r\n            controls\r\n            width=\"720\" height=\"480\"\r\n            src={finalVid}></video>\r\n        }\r\n        {!isConverting && <span className=\"cutAndMerge\" onClick={handleCutAndMerge}>Cut and Merge</span>}\r\n        <p className=\"progress\">{progress}</p>\r\n        {/* <p >{message}</p> */}\r\n      </div>\r\n\r\n      <p>*default: first 15 seconds</p>\r\n\r\n      <div className=\"footer\">\r\n        <p>üë®‚Äçüíª<a className=\"githubLink\" href=\"https://github.com/lesterroan/react-trim-and-merge-pwa\" target=\"_blank\">Made With React and FFmpeg.wasm</a></p>\r\n      </div>\r\n    </div >\r\n  ) : (<div className=\"videoGroup\">\r\n    <span>Loading FFmpeg...please wait</span>\r\n    <span> <Loader\r\n      type=\"ThreeDots\"\r\n      color=\"#fa476e\"\r\n      height={50}\r\n      width={50}\r\n      visible={true}\r\n    /></span>\r\n    <span className=\"warning\">Does not work on Firefox 79+ and Mobile yet, please use Chrome or Edge Desktop</span>\r\n  </div>)\r\n}\r\n\r\n\r\nconst TimeFormat = ({ videoLength }) => {\r\n  console.log(videoLength);\r\n\r\n\r\n\r\n  return (<>\r\n    <div style={{\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      backgroundColor: \"transparent\"\r\n    }}>\r\n      <DurationDropDown durationInput={videoLength.h} /> : <DurationDropDown durationInput={videoLength.m} /> : <DurationDropDown durationInput={videoLength.s} />\r\n    </div>\r\n  </>)\r\n}\r\n\r\nconst DurationDropDown = ({ durationInput, place }) => {\r\n\r\n  return (<>\r\n    <button>{durationInput}</button>\r\n  </>)\r\n}\r\n\r\nexport default App;\r\n","D:\\Test Projects\\pwa-video-editor\\src\\reportWebVitals.js",[],"D:\\Test Projects\\pwa-video-editor\\src\\serviceWorker.js",[],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":20,"column":10,"nodeType":"32","messageId":"33","endLine":20,"endColumn":17},{"ruleId":"30","severity":1,"message":"34","line":70,"column":9,"nodeType":"32","messageId":"33","endLine":70,"endColumn":18},{"ruleId":"35","severity":1,"message":"36","line":221,"column":17,"nodeType":"37","endLine":221,"endColumn":121},{"ruleId":"30","severity":1,"message":"38","line":238,"column":7,"nodeType":"32","messageId":"33","endLine":238,"endColumn":17},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'message' is assigned a value but never used.","Identifier","unusedVar","'loadVideo' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'TimeFormat' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]